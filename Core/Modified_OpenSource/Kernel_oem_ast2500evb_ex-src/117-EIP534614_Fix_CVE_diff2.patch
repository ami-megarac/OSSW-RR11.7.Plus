diff -Naur linux.old/fs/attr.c linux/fs/attr.c
--- linux.old/fs/attr.c	2020-04-17 17:01:16.921205447 +0800
+++ linux/fs/attr.c	2020-04-17 18:32:53.700035354 +0800
@@ -262,11 +262,23 @@
 	if (error)
 		return error;
 
+	/* Smuggle the dentry through to inode_change_ok() */
+	if (!(attr->ia_valid & ATTR_FILE)) {
+		attr->ia_file = (struct file *)dentry;
+		attr->ia_valid |= ATTR_DENTRY;
+	}	
+
 	if (inode->i_op->setattr)
 		error = inode->i_op->setattr(dentry, attr);
 	else
 		error = simple_setattr(dentry, attr);
 
+	if (attr->ia_valid & ATTR_DENTRY) {
+		if (!(attr->ia_valid & ATTR_FILE))
+			attr->ia_file = NULL;
+		attr->ia_valid &= ~ATTR_DENTRY;
+	}	
+
 	if (!error) {
 		fsnotify_change(dentry, ia_valid);
 		ima_inode_post_setattr(dentry);
diff -Naur linux.old/include/linux/filter.h linux/include/linux/filter.h
--- linux.old/include/linux/filter.h	2020-04-17 17:01:16.921205447 +0800
+++ linux/include/linux/filter.h	2020-04-17 18:18:29.577379717 +0800
@@ -41,7 +41,12 @@
 		   offsetof(struct sk_filter, insns[proglen]));
 }
 
-extern int sk_filter(struct sock *sk, struct sk_buff *skb);
+int sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap);
+static inline int sk_filter(struct sock *sk, struct sk_buff *skb)
+{
+	return sk_filter_trim_cap(sk, skb, 1);
+}
+
 extern unsigned int sk_run_filter(const struct sk_buff *skb,
 				  const struct sock_filter *filter);
 extern int sk_unattached_filter_create(struct sk_filter **pfp,
diff -Naur linux.old/include/linux/fs.h linux/include/linux/fs.h
--- linux.old/include/linux/fs.h	2020-04-17 17:01:16.921205447 +0800
+++ linux/include/linux/fs.h	2020-04-17 18:33:14.095775825 +0800
@@ -216,6 +216,7 @@
 #define ATTR_KILL_PRIV	(1 << 14)
 #define ATTR_OPEN	(1 << 15) /* Truncating from open(O_TRUNC) */
 #define ATTR_TIMES_SET	(1 << 16)
+#define ATTR_DENTRY	(1 << 18) /* ia_file is actually a dentry */
 
 /*
  * This is the Inode Attributes structure, used for notify_change().  It
diff -Naur linux.old/include/net/tcp.h linux/include/net/tcp.h
--- linux.old/include/net/tcp.h	2020-04-17 17:01:16.921205447 +0800
+++ linux/include/net/tcp.h	2020-04-17 18:18:59.425768439 +0800
@@ -1028,6 +1028,7 @@
 }
 
 bool tcp_prequeue(struct sock *sk, struct sk_buff *skb);
+int tcp_filter(struct sock *sk, struct sk_buff *skb);
 
 #undef STATE_TRACE
 
diff -Naur linux.old/net/core/filter.c linux/net/core/filter.c
--- linux.old/net/core/filter.c	2020-04-17 17:01:16.921205447 +0800
+++ linux/net/core/filter.c	2020-04-17 18:20:00.475046101 +0800
@@ -67,9 +67,10 @@
 }
 
 /**
- *	sk_filter - run a packet through a socket filter
+ *	sk_filter_trim_cap - run a packet through a socket filter
  *	@sk: sock associated with &sk_buff
  *	@skb: buffer to filter
+ *	@cap: limit on how short the eBPF program may trim the packet 
  *
  * Run the filter code and then cut skb->data to correct size returned by
  * sk_run_filter. If pkt_len is 0 we toss packet. If skb->len is smaller
@@ -78,7 +79,7 @@
  * be accepted or -EPERM if the packet should be tossed.
  *
  */
-int sk_filter(struct sock *sk, struct sk_buff *skb)
+int sk_filter_trim_cap(struct sock *sk, struct sk_buff *skb, unsigned int cap)
 {
 	int err;
 	struct sk_filter *filter;
diff -Naur linux.old/net/ipv4/netfilter/ipt_MASQUERADE.c linux/net/ipv4/netfilter/ipt_MASQUERADE.c
--- linux.old/net/ipv4/netfilter/ipt_MASQUERADE.c	2020-04-17 17:01:16.925205447 +0800
+++ linux/net/ipv4/netfilter/ipt_MASQUERADE.c	2020-04-17 18:15:27.348147084 +0800
@@ -128,10 +128,18 @@
 			   unsigned long event,
 			   void *ptr)
 {
-	struct net_device *dev = ((struct in_ifaddr *)ptr)->ifa_dev->dev;
+	struct in_device *idev = ((struct in_ifaddr *)ptr)->ifa_dev;	
 	struct netdev_notifier_info info;
 
-	netdev_notifier_info_init(&info, dev);
+	/* The masq_dev_notifier will catch the case of the device going
+	 * down.  So if the inetdev is dead and being destroyed we have
+	 * no work to do.  Otherwise this is an individual address removal
+	 * and we have to perform the flush.
+	 */
+	if (idev->dead)
+		return NOTIFY_DONE;
+
+	netdev_notifier_info_init(&info, idev->dev);
 	return masq_device_event(this, event, &info);
 }
 
diff -Naur linux.old/net/ipv4/ping.c linux/net/ipv4/ping.c
--- linux.old/net/ipv4/ping.c	2020-04-17 17:01:16.925205447 +0800
+++ linux/net/ipv4/ping.c	2020-04-17 18:30:39.177944074 +0800
@@ -155,16 +155,16 @@
 {
 	struct inet_sock *isk = inet_sk(sk);
 	pr_debug("ping_unhash(isk=%p,isk->num=%u)\n", isk, isk->inet_num);
+	write_lock_bh(&ping_table.lock);
 	if (sk_hashed(sk)) {
-		write_lock_bh(&ping_table.lock);
 		hlist_nulls_del(&sk->sk_nulls_node);
 		sk_nulls_node_init(&sk->sk_nulls_node);
 		sock_put(sk);
 		isk->inet_num = 0;
 		isk->inet_sport = 0;
 		sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
-		write_unlock_bh(&ping_table.lock);
 	}
+	write_unlock_bh(&ping_table.lock);
 }
 EXPORT_SYMBOL_GPL(ping_unhash);
 
diff -Naur linux.old/net/ipv4/tcp_input.c linux/net/ipv4/tcp_input.c
--- linux.old/net/ipv4/tcp_input.c	2020-04-17 17:01:16.925205447 +0800
+++ linux/net/ipv4/tcp_input.c	2020-04-17 18:17:11.130241273 +0800
@@ -3338,17 +3338,19 @@
 	/* unprotected vars, we dont care of overwrites */
 	static u32 challenge_timestamp;
 	static unsigned int challenge_count;
-	u32 now = jiffies / HZ;
-	u32 count=0;
+	u32 count, now = jiffies / HZ;
 
 	if (now != challenge_timestamp) {
 		u32 half = (sysctl_tcp_challenge_ack_limit + 1) >> 1;
 		challenge_timestamp = now;
-		WRITE_ONCE(challenge_count, half + prandom_u32_max(sysctl_tcp_challenge_ack_limit));
+		ACCESS_ONCE(challenge_count) =
+			half + (u32)(
+			((u64) prandom_u32() * sysctl_tcp_challenge_ack_limit)
+			>> 32);
 	}
-	count = READ_ONCE(challenge_count);
+	count = ACCESS_ONCE(challenge_count);
 	if (count > 0) {
-		WRITE_ONCE(challenge_count, count - 1);
+		ACCESS_ONCE(challenge_count) = count - 1;
 		NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPCHALLENGEACK);
 		tcp_send_ack(sk);
 	}
diff -Naur linux.old/net/ipv4/tcp_ipv4.c linux/net/ipv4/tcp_ipv4.c
--- linux.old/net/ipv4/tcp_ipv4.c	2020-04-17 17:01:16.925205447 +0800
+++ linux/net/ipv4/tcp_ipv4.c	2020-04-17 18:21:45.442923711 +0800
@@ -1613,6 +1613,19 @@
 }
 EXPORT_SYMBOL(tcp_v4_conn_request);
 
+int tcp_filter(struct sock *sk, struct sk_buff *skb)
+{
+	struct tcphdr *th = (struct tcphdr *)skb->data;
+	unsigned int eaten = skb->len;
+	int err;
+	err = sk_filter_trim_cap(sk, skb, th->doff * 4);
+	if (!err) {
+		eaten -= skb->len;
+		TCP_SKB_CB(skb)->end_seq -= eaten;
+	}
+	return err;
+}
+EXPORT_SYMBOL(tcp_filter);
 
 /*
  * The three way handshake has completed - we got a valid synack -
@@ -1989,8 +2002,10 @@
 		goto discard_and_relse;
 	nf_reset(skb);
 
-	if (sk_filter(sk, skb))
+	if (tcp_filter(sk, skb))
 		goto discard_and_relse;
+	th = (const struct tcphdr *)skb->data;
+	iph = ip_hdr(skb);
 
 	sk_mark_napi_id(sk, skb);
 	skb->dev = NULL;
diff -Naur linux.old/net/ipv6/tcp_ipv6.c linux/net/ipv6/tcp_ipv6.c
--- linux.old/net/ipv6/tcp_ipv6.c	2020-04-17 17:01:16.921205447 +0800
+++ linux/net/ipv6/tcp_ipv6.c	2020-04-17 18:22:39.803236550 +0800
@@ -1347,7 +1347,7 @@
 		goto discard;
 #endif
 
-	if (sk_filter(sk, skb))
+	if (tcp_filter(sk, skb))
 		goto discard;
 
 	/*
@@ -1519,9 +1519,12 @@
 	if (!xfrm6_policy_check(sk, XFRM_POLICY_IN, skb))
 		goto discard_and_relse;
 
-	if (sk_filter(sk, skb))
+	if (tcp_filter(sk, skb))
 		goto discard_and_relse;
 
+	th = (const struct tcphdr *)skb->data;
+	hdr = ipv6_hdr(skb);
+
 	sk_mark_napi_id(sk, skb);
 	skb->dev = NULL;
 
